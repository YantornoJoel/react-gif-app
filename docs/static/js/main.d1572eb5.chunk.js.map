{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,YCLnBG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAErC,OAEI,yBAAKC,UAAU,+DACX,yBAAKC,IAAMF,EAAMG,IAAOJ,EAAQE,UAAU,qBAC1C,+BAAMF,EAAN,O,uBCPEK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACdN,EADc,iDACmCO,UAAWF,GAD9C,+DAEFG,MAAMR,GAFJ,cAEdS,EAFc,gBAGGA,EAAIC,OAHP,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATtB,kBAYbY,GAZa,4CAAH,sDCGRK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EAEZrB,mBAAS,CAC/B2B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAuBtC,OAfAC,qBAAU,WAENjB,EAAQC,GAEHiB,MAAK,SAAAC,GAEEH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAI1B,CAACb,IAGGc,EDtB2BK,CAAanB,GAAjCU,EAFuB,EAE7BJ,KAAcO,EAFe,EAEfA,QAGtB,OACI,oCACI,wBAAIjB,UAAU,qCAAd,IAAoDI,EAApD,KAEEa,GAAW,uBAAGjB,UAAU,oCAAb,eAEb,yBAAKA,UAAU,aAGPc,EAAOF,KAAI,SAAAC,GAAG,OAEV,kBAAC,EAAD,eACIW,IAAKX,EAAIhB,IACLgB,UEjBnBY,EAAe,WAAO,IAAD,EACM1C,mBAAS,CAAC,WADhB,mBACvB2C,EADuB,KACX5C,EADW,KAU9B,OACI,oCACI,sCACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ4C,EAAWd,KAAI,SAAAR,GAAQ,OACnB,kBAAC,EAAD,CACEoB,IAAKpB,EACLA,SAAUA,U,MCrBpCuB,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.d1572eb5.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategories (cats => [ inputValue, ...cats ])\r\n            setInputValue('')\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\" \r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes= {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        \r\n        <div className=\"card animate__animated animate__fadeIn animate__zoomInLeft \">\r\n            <img src={ url } alt= { title } className=\"animate__flipInY\"/> \r\n            <p> { title } </p> \r\n        </div>\r\n    )\r\n}\r\n"," //EncodeURI para que en las peticiones no deje espacios agrega por ejemplo el 20%\r\n export const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=yu67BcsODChCCvIdu0qmjcEDP2gf4E0S`\r\n    const res = await fetch(url);\r\n    const { data } = await res.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {\r\n                    images.map(img => (\r\n\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img} //Destructuring con expected\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n\r\n            .then(imgs => {\r\n\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n              \r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([\"Futbol\"])\r\n\r\n    // const handleAdd = () => {\r\n    //     DOS FORMAS DE ACTUALIZAR EL ESTADO CATEGORIES\r\n    //     setCategories([...categories, \"Superman\"]) //con expect\r\n    //     setCategories(cats => [...cats, \"Superman\"]) con callback \r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifApp</h2>\r\n            <AddCategory setCategories= {setCategories} />\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifGrid\r\n                          key={category}\r\n                          category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}